\chapter{Design and Architecture}
In this chapter an application architecture called Flux will be explained in more detail with examples.  Also it will explain the whole system, the client the server, storage and communication. First the general architecture of client and server as a whole, and then focus on individual parts of the system in more detail, and explain the most interesting parts of the architecture. Reasonin behind some desig choices will albo be included.

\section{Flux}
To explain how Flux application architecture works and behaves, a couple of examples will be presented of differend complexity. Explanation will involve a minimal amount of code, but section \ref{sec:fluximplementation} in chapter \ref{cha:implementation} has more technical information. To get a more general feel of Flux and other architectures revisit section \ref{sec:fluxmvc} in chapter \ref{cha:beckground}.

\subsection{Most important elements in Flux}
\subsubsection*{ActionCreators}
User interactions like pressing a button, triggers an action in the system. Thise action creators are associated with UI elements, they can have a long range of methods in them, depending on how comprehensive the UI elements are and how many interactive elements they have. \worry{look up flux definition <-}
We often create a library of helper methods called action creators that not only create the action object, but also pass the action to the dispatcher.
\todo{here}
\subsubsection*{The Dispatcher}
The Dispatchers role is to manage all the actions, it doesn't know where the action is going, neither what the payload is. The dispatcher is globally notifying the stores about the actions, and additionaly the stores can be set up to wait for other stores update themselves. With the Dispatcher \emph{waitFor()} method, a \emph{not ready flag} can be set on any particular store that depends on the data from another store. 
\todo{here}
\subsection*{State and stores}
one could compare state to the information stored in URL, although state comprises of much more information than URL.
State is stored in objects called Stores.
\todo{here}
\subsection*{Views / Components}
Views are implemented using React, they have so called \emph{lifecycle hooks} that scale well with Flux architecture. We use \emph{EventEmitter}
\todo{here}
\subsection{Simple user action with Flux}\label{sec:simplefluxexample}
The main idea of flux architecture is that it forces one directional dataflow through the system. Any action created, whether through a person interacting with the application or through a web api call, from the systems perspecive, will always originate from the same place, in Flux we call that place the dispatcher. When the focus is scalability, building simple things like triggering a remove operation on a list, may seem cubersome when one needs to follow quite strict rules, such as those proposed in Flux. Following those rules pays off at the end, as it simplifies implementation process of other modules. The following example will try to explain the simplicity of Flux.
\\One of the requirements of Autograder, is for teacher to be able to remove users or students from courses and/or the whole sysetm. For this purpuse a user list is presented for the teacher:
\begin{figure}[h]
 % \scalebox{1}{\input{./graphics/simpleremoveuser.tex}}
  \scalebox{1}[1]{{\includegraphics[width=1\linewidth]{graphics/simpleremoveuser.png}}}
  \caption{Wireframe representation of course student list view}
  \label{fig:simpleremoveuser}
\end{figure}

At any given time the application is in some \emph{state}, the state has the information about who is pressing the button, what course is active and much more. When an action to remove a student is being sent, it gets dispatched through a dispatcher (the origin of all changes). The stores that are interested in this action update themselves according to the information in action's payload, slightly changing the state of the application. In this case, one of \emph{action creators} methods, will be sending an action for removeing the user from a course.

\begin{figure}[h]
  \scalebox{0.8}{\input{./graphics/simplefluxremoveuser.tex}}
  \caption{How removeing user happens with this architecture.}
  \label{fig:simplefluxremoveuser}
\end{figure}

Pressing the button to remove a user, will call \emph{removeUser()} from ActionCreatorsCourseUsers, this method will return a object literal, with an \emph{actionType} and \emph{payload} (see Figure \ref{fig:simplefluxremoveuser}), and also pass it further to the Dispatcher. The payload is a coma separated list of variables, in this case only the user data would have to be sent which is stored in CourseStudentListStore. When the action reaches the store, the store then updates itself, it calls it private method to manipulate the data it stores. Here is where the \emph{EventEmitter} comes to play, when the stores private methods return, the event emitter assigned to that store emitts a \emph{change event}. React components are set up to trigger new render cycles when they receive that change event. What changed doesnt matter, components only needs to know that something changed. When new render cycle is triggered the view will use store's public methods to retrieve new data. This time around the store updated itself to remove the user, as a result the view will not render that user on this render cycle.

\subsection{Advanced Flux}\label{sec:advancedfluxexample}
What makes Flux a great architecture is that more complicated implementations do not differ that much form the simpler ones. The data flow in Flux is one directional, two different views will not communicate directly with eachother, rather they will do so by creating actions, triggering store changes and consequently updating both views. To explain how different views communicate, and how stores and store dependancies work, it is necessay to look at a bigger part of a page not just one single element, and explore the communication between views making up that page.
\\Lets take a look at the views responsible for managing groups for courses. There are three main views shown in figure \ref{fig:advancedgroupmanager}, first takes care of switching between the courses, second lists available students that have no groups assigned, and the last one shows group list and manager. The first view at the top, is for switching between courses, it's independent of the two views below it. Switching course will change the state of the application consequently triggering an API request for new list of students and groups. The buttons for adding students to course, on the left view, and data associated with them, communicate with the righ view that lists the groups and participants.

\begin{figure}[h]
 % \scalebox{1}{\input{./graphics/simpleremoveuser.tex}}
  \scalebox{1}[1]{{\includegraphics[width=1\linewidth]{graphics/advancedgroupmanager.png}}}
  \caption{Group manager and actions that can be triggered by user}
  \todo{fix figure}
  \label{fig:advancedgroupmanager}
\end{figure}

Datastructure that will represent the two views, a store called \emph{GroupManagerStore}, will have to communicate with another store called \emph{ActiveCourseStore} - that store is responsible for holding data about the current active course in the state. The way this particular example is set up, GroupManagerStore depends on the data in ActiveCourseStore. However the sequence of user actions that will create that dependency is such that ActiveCouresStore is never empty when GroupManagerStore needs it's data, so we don't have to worry about implementing additional wait conditions here. This is because at any given time, at least one course is active, either user selected or default. In addition to those two stores, a third store is used in the background. Given that a teacher selected a course, he will most likely stay on that course in order to execute different changes in that course. This gives an oportunity to optimize the API requests to some degree. The student data for the current course can be reused  while the user navigates within a course. Therefore there is a separate store for student list called \emph{StudentsStore}, other stores that require a list of students will no longer have to request this data from the server, given that another store already requested student lists and the user didn't switch the course. For example, both GroupManagerStore and the store from previous example \ref{sec:simplefluxexample} would require a list of students, if navigation between views utilising those views will take place only one initial API request will be triggered.
\\Given the state shown in figure \ref{fig:advancedgroupmanager}, the teacher selects a user to be added to the active course, lets go through the flow of data in that case.

\begin{figure}[h]
  \scalebox{0.8}{\input{./graphics/advancedfluxaddstudent.tex}}
  \caption{How removeing user happens with this architecture.}
  \label{fig:advancedfluxaddstudent}
\end{figure}

When the user presses the button, one of \emph{GroupManagerActionCreators} is called. The current state, based on the figure \ref{fig:advancedgroupmanager} includes data like:
\\\emph{activeGroup:"Group2",activeCourse:"DAT310" \worry{fix figure and data}}\\
activeGroup is located in GroupManagerStore, this data represents which group did the user choose, in order to add new student to it. 

\section{Application architecture}
Shit something
\begin{figure}[h]
  \scalebox{1}{\input{./graphics/systemoverview.tex}}
  \caption{Overview of the whole system, not implemented modules are grayed out.}
  \label{fig:systemoverview}
\end{figure}

\newpage
%OLD
\section{Web app}
Architecture of the Autograder system describes the high level structures developed while working on the application. Choice of software architecture, software models on both front and back-end are crucial aspects of creating good application.
\subsection{Software architecture}
Autograder is an application for teachers and students, the new version is going to be running on local university network and is going to be accessible from anywhere on the internet. Primary use for teachers is new creating courses in the system, that are associated with the courses at the university, each course has a GitHub repository associated with it, and configured to the needs of that course. This means that an implementation of GitHub integration needs to be created, this is mainly the focus of back-end part of the software, still the front-end, or web client, needs to be designed in such a way to enable the
 use of such integration. The client is not supposed to serve as an alternative view of GitHub repositories, GitHub is mainly used as a place to easily store source code, and its login authentication API. The client needs to be able to display courses that a student is enrolled into, assignments that the teacher has published to that course, that also involves group assignments.
\\Although the data is stored in the database, manipulation of that data is done on the client side, and then sent further to the back-end for interpretation and updating the storage. Similarly it is also possible to update the client from the back-end, either directly or through the actions of another client. The user interface updates in real time, as an example, lets take a teacher that is assigning students to group assignments, teacher is using an interactive interface to manipulate the users into selected groups, the student is simultaneously notified in real time when he gets assigned to a new group without the need of refreshing the page, similar things would be new teachers in course, requests for teacher upgrade, deadline and slipdays updates. Teachers can be notified when a new student has enrolled to course, or one of the students has exceeded his slip-days for an assignment. Real time updates are possible due to the connection protocol used in the application. When a client connects to the Autograder server, client application requests for a protocol upgrade, from then on all data transfer is done through \emph{websocket protocol}\cite{websocket}. This enables the server to push its updates to all clients, without being explicitly asked about it by them.
\\The reasoning behind real-time update system was that notifications and responsiveness of user interface was one of the primary reasons for developing this solution. Although one could argue that order methods of updating the UI and notifications would be sufficient, like polling or long-polling - that is frequent client requests for update from the server, websocket protocol has no obvious disadvantages to the presented solution, and at the same time opens possibilities for further upgrades of the system, like chat functionality, which could be utilized for questions related to assignments.
\subsection{Front-end}
Front-end web applications are written in JavaScript, or at least have to be transpiled to JavaScript for the browsers to be able to understand it. Applications in JS, are single threaded...
\todo{single threaded approach}

\section{Server}
Back-end solution is not the main focus of this application. Nonetheless a working temporary server needed to be put together, as well as database to store mock data and to test the logical functionality of the system on the front-end and the way the data is being communicated between the two ends.
\subsection{Server}
The server is written in Go, for this purpose there was no real  preference as to what language to use, but assumptions were made that the final server will also be written in Go, therefore it was an obvious choice. Client is designed with WebSocket in mind, the simplest way to implement that on server side is to use Gorilla websocket Go package that can handle WebSocket messages. This was implemented with almost no effort, but the next step is to create logic for handling all the different requests that come from the client. For this purpose, when a server receives a message through WebSocket, a new \emph{goroutine} is fired out, since they are very lightweigh a lot of requests can be potentially handled at the same time. Every requests goes through a simple multiplexer that figures out, based on the message header, what kind of request is made, then it uses the payload to retrieve specific data. As and exaple let's take a user that requested to see all its courses by going to the course overview page, that lists courses that the user is associated with.

\begin{figure}[h]
  \input{./graphs/serverwebsocket.tex}
  \caption{How requests are handled on the server}
  \label{fig:serverwebsocket}
\end{figure}

The server is also serving three static files, main.js, index.html, and style.css. These are retrieved by the client with the initial GET request, from then on server is not receivein any new GET requests but rather communicates through websocket. This is a bit different than traditionall communication with GET and POST. Also when the client goes directly to a specific URL like "http://www.autograder.no/teacher/results/dat100" server should respond only with the static data and not care about the path after the domainname / IP, since this part is taken care of by the client side routing, as explained in section \ref{sec:softwaresolution}. Further, when a user navigates through the application no GET requests are being made.
\\ActionType that the multiplexer pivots at, is a string representing something similar to what a REST API would typically use. ActionType is a string describing an event, and Payload is the data that is needed to make the changes. Typical HTML form send through websocket, would look like that:
\todo{use form from course settings here}
latex online collaboration\lstinputlisting[label=lst:websocketapi]{listings/websocketapi.js}

This means in short that the client requests roles for username "tokams", server should respond with the same actionType, and as a payload insert relevant data.

\subsection {Database}
Database is running on mysql-server, it's separate from the main go server, it communicates with the server with the help of go sql/package and a 3rd party mysql driver \cite{ziutek}. It is a relational database, that represents the data of users and courses. Although not necessary, it was helpfoul to implement test database solution, to explore the possibilities for back end, and se front to back flow of the data. Database was designed with standard ER diagrams first, and then set up on local machines.
It is discuissed in a bit more technical way in section \ref{sec:database}, and the figure \ref{fig:databaseer}.

